// Generated by gencpp from file drowsiness_detection_pkg/Face.msg
// DO NOT EDIT!


#ifndef DROWSINESS_DETECTION_PKG_MESSAGE_FACE_H
#define DROWSINESS_DETECTION_PKG_MESSAGE_FACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drowsiness_detection_pkg
{
template <class ContainerAllocator>
struct Face_
{
  typedef Face_<ContainerAllocator> Type;

  Face_()
    : Word()  {
    }
  Face_(const ContainerAllocator& _alloc)
    : Word(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Word_type;
  _Word_type Word;





  typedef boost::shared_ptr< ::drowsiness_detection_pkg::Face_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drowsiness_detection_pkg::Face_<ContainerAllocator> const> ConstPtr;

}; // struct Face_

typedef ::drowsiness_detection_pkg::Face_<std::allocator<void> > Face;

typedef boost::shared_ptr< ::drowsiness_detection_pkg::Face > FacePtr;
typedef boost::shared_ptr< ::drowsiness_detection_pkg::Face const> FaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drowsiness_detection_pkg::Face_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drowsiness_detection_pkg::Face_<ContainerAllocator1> & lhs, const ::drowsiness_detection_pkg::Face_<ContainerAllocator2> & rhs)
{
  return lhs.Word == rhs.Word;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drowsiness_detection_pkg::Face_<ContainerAllocator1> & lhs, const ::drowsiness_detection_pkg::Face_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drowsiness_detection_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drowsiness_detection_pkg::Face_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drowsiness_detection_pkg::Face_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drowsiness_detection_pkg::Face_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65ac8484bf24836096969362e94897e2";
  }

  static const char* value(const ::drowsiness_detection_pkg::Face_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65ac8484bf248360ULL;
  static const uint64_t static_value2 = 0x96969362e94897e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drowsiness_detection_pkg/Face";
  }

  static const char* value(const ::drowsiness_detection_pkg::Face_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Word\n"
;
  }

  static const char* value(const ::drowsiness_detection_pkg::Face_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Word);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Face_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drowsiness_detection_pkg::Face_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drowsiness_detection_pkg::Face_<ContainerAllocator>& v)
  {
    s << indent << "Word: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Word);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DROWSINESS_DETECTION_PKG_MESSAGE_FACE_H
